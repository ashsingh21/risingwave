# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    create table t (v int);
    select v+v from t limit 4;
  logical_plan: |-
    LogicalLimit { limit: 4, offset: 0 }
    └─LogicalProject { exprs: [(t.v + t.v) as $expr1] }
      └─LogicalScan { table: t, columns: [t.v, t._row_id] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [(t.v + t.v) as $expr1] }
    └─LogicalLimit { limit: 4, offset: 0 }
      └─LogicalScan { table: t, columns: [t.v] }
- sql: |
    create table t (v int);
    select * from t offset 4;
  logical_plan: |-
    LogicalLimit { limit: 9223372036854775807, offset: 4 }
    └─LogicalProject { exprs: [t.v] }
      └─LogicalScan { table: t, columns: [t.v, t._row_id] }
- sql: |
    create table t (v int);
    select * from ( select v+v from t limit 5 ) limit 4;
  logical_plan: |-
    LogicalLimit { limit: 4, offset: 0 }
    └─LogicalProject { exprs: [$expr1] }
      └─LogicalLimit { limit: 5, offset: 0 }
        └─LogicalProject { exprs: [(t.v + t.v) as $expr1] }
          └─LogicalScan { table: t, columns: [t.v, t._row_id] }
  optimized_logical_plan_for_batch: |-
    LogicalLimit { limit: 4, offset: 0 }
    └─LogicalProject { exprs: [(t.v + t.v) as $expr1] }
      └─LogicalLimit { limit: 5, offset: 0 }
        └─LogicalScan { table: t, columns: [t.v] }
- sql: |
    create table t (v int);
    select * from t fetch first 4 rows only;
  logical_plan: |-
    LogicalLimit { limit: 4, offset: 0 }
    └─LogicalProject { exprs: [t.v] }
      └─LogicalScan { table: t, columns: [t.v, t._row_id] }
- sql: |
    create table t (v int);
    select * from t offset 3 fetch first 4 rows only;
  logical_plan: |-
    LogicalLimit { limit: 4, offset: 3 }
    └─LogicalProject { exprs: [t.v] }
      └─LogicalScan { table: t, columns: [t.v, t._row_id] }
- sql: |
    create table t (v int);
    select * from t fetch next rows only;
  logical_plan: |-
    LogicalLimit { limit: 1, offset: 0 }
    └─LogicalProject { exprs: [t.v] }
      └─LogicalScan { table: t, columns: [t.v, t._row_id] }
- sql: |
    create table t (v int);
    select * from t order by v fetch next 2 rows with ties;
  logical_plan: |-
    LogicalTopN { order: [t.v ASC], limit: 2, offset: 0, with_ties: true }
    └─LogicalProject { exprs: [t.v] }
      └─LogicalScan { table: t, columns: [t.v, t._row_id] }
- sql: |
    -- Should be equivalent to above
    create table t (v int);
    select v from
    (select *, RANK() OVER (ORDER BY v) AS rank from t)
    where rank <= 2;
  optimized_logical_plan_for_batch: |-
    LogicalTopN { order: [t.v ASC], limit: 2, offset: 0, with_ties: true }
    └─LogicalScan { table: t, columns: [t.v] }
- sql: |
    create table t (v int);
    select * from t order by v offset 1 fetch next 2 rows with ties;
  planner_error: |-
    Feature is not yet implemented: WITH TIES is not supported with OFFSET
    No tracking issue yet. Feel free to submit a feature request at https://github.com/risingwavelabs/risingwave/issues/new?labels=type%2Ffeature&template=feature_request.yml
- sql: |
    select 1 limit 1
  batch_plan: |-
    BatchLimit { limit: 1, offset: 0 }
    └─BatchValues { rows: [[1:Int32]] }
- sql: |
    select 1 order by 1 limit 1
  batch_plan: |-
    BatchTopN { order: [1:Int32 ASC], limit: 1, offset: 0 }
    └─BatchValues { rows: [[1:Int32]] }
- sql: |
    select 1 union all select 1 limit 10
  batch_plan: |-
    BatchLimit { limit: 10, offset: 0 }
    └─BatchValues { rows: [[1:Int32], [1:Int32]] }
- sql: |
    select 1 union all select 1 order by 1 limit 10
  batch_plan: |-
    BatchTopN { order: [1:Int32 ASC], limit: 10, offset: 0 }
    └─BatchValues { rows: [[1:Int32], [1:Int32]] }
- sql: |
    create table t (a int);
    select count(*) from t limit 1;
  batch_plan: |-
    BatchLimit { limit: 1, offset: 0 }
    └─BatchSimpleAgg { aggs: [sum0(count)] }
      └─BatchExchange { order: [], dist: Single }
        └─BatchSimpleAgg { aggs: [count] }
          └─BatchScan { table: t, columns: [], distribution: SomeShard }
- sql: |
    create table t (a int);
    select count(*) from t order by 1 limit 1;
  batch_plan: |-
    BatchTopN { order: [sum0(count) ASC], limit: 1, offset: 0 }
    └─BatchSimpleAgg { aggs: [sum0(count)] }
      └─BatchExchange { order: [], dist: Single }
        └─BatchSimpleAgg { aggs: [count] }
          └─BatchScan { table: t, columns: [], distribution: SomeShard }
- sql: |
    create table t (a int primary key);
    select * from t limit 1;
  batch_plan: |-
    BatchLimit { limit: 1, offset: 0 }
    └─BatchExchange { order: [], dist: Single }
      └─BatchLimit { limit: 1, offset: 0 }
        └─BatchScan { table: t, columns: [t.a], distribution: UpstreamHashShard(t.a) }
